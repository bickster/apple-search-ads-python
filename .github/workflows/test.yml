name: Test and Lint

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check src tests
    
    - name: Type check with mypy
      run: |
        mypy src
    
    - name: Test with pytest
      run: |
        pytest tests -v --cov=apple_search_ads --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Clean build artifacts
      run: rm -rf dist/ build/ *.egg-info/
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Extract version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      uses: ncipollo/create-release@v1
      with:
        tag: ${{ github.ref_name }}
        name: Release v${{ env.VERSION }}
        body: |
          ## Release v${{ env.VERSION }}
          
          ### Changes
          See the [commit history](https://github.com/${{ github.repository }}/compare/v${{ env.VERSION }}...v${{ env.VERSION }}) for detailed changes.
          
          ### Installation
          ```bash
          pip install apple-search-ads-client==${{ env.VERSION }}
          ```
          
          ### PyPI Package
          - ðŸ“¦ [PyPI Package](https://pypi.org/project/apple-search-ads-client/${{ env.VERSION }}/)
          - ðŸ“‹ [Release Guide](https://github.com/${{ github.repository }}/blob/main/RELEASE_GUIDE.md)
          - ðŸ“– [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          ### Distribution Files
          - `apple_search_ads_client-${{ env.VERSION }}-py3-none-any.whl` - Wheel distribution
          - `apple_search_ads_client-${{ env.VERSION }}.tar.gz` - Source distribution
          
          ---
          ðŸ¤– Automated release created by GitHub Actions
        artifacts: "dist/*"
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}